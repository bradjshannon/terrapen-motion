#!/usr/bin/env python3
"""
TerraPen Motion Control - Git Hook Automation
Pre-commit hook that runs tests before allowing commits
"""

import subprocess
import sys
import os
import tempfile

def run_arduino_compile_test():
    """Compile TestRunner example to verify all tests compile"""
    print("🔨 Compiling TestRunner example...")
    
    # Use arduino-cli to compile (must be installed)
    cmd = [
        "arduino-cli", "compile",
        "--fqbn", "arduino:avr:nano:cpu=atmega328old",
        "--library", ".",
        "examples/TestRunner"
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("✅ Compilation successful")
            return True
        else:
            print(f"❌ Compilation failed:\n{result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print("❌ Compilation timeout")
        return False
    except FileNotFoundError:
        print("⚠️  arduino-cli not found, skipping compilation test")
        return True  # Don't block commits if arduino-cli not available

def run_python_simulator_tests():
    """Run Python robot simulator tests if available"""
    if not os.path.exists("robot_simulator"):
        return True
        
    print("🐍 Running Python simulator tests...")
    
    cmd = ["python", "-m", "pytest", "robot_simulator/", "-v"]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("✅ Python tests passed")
            return True
        else:
            print(f"❌ Python tests failed:\n{result.stdout}\n{result.stderr}")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("⚠️  Python tests skipped")
        return True

def check_documentation():
    """Verify key documentation files exist and are updated"""
    required_docs = [
        "README.md",
        "ARCHITECTURE.md", 
        "library.properties"
    ]
    
    print("📚 Checking documentation...")
    
    for doc in required_docs:
        if not os.path.exists(doc):
            print(f"❌ Missing required documentation: {doc}")
            return False
    
    # Check if library.properties version matches git tag (if any)
    try:
        with open("library.properties", "r") as f:
            content = f.read()
            if "version=0.0.0" in content:
                print("⚠️  Library version still at 0.0.0, consider updating")
    except:
        pass
    
    print("✅ Documentation check passed")
    return True

def main():
    """Main pre-commit hook logic"""
    print("🚀 TerraPen Motion Control - Pre-commit Testing")
    print("=" * 50)
    
    tests_passed = True
    
    # Run all validation checks
    if not check_documentation():
        tests_passed = False
    
    if not run_arduino_compile_test():
        tests_passed = False
    
    if not run_python_simulator_tests():
        tests_passed = False
    
    print("=" * 50)
    
    if tests_passed:
        print("✅ All pre-commit tests passed! 🎉")
        return 0
    else:
        print("❌ Pre-commit tests failed!")
        print("💡 Fix the issues above before committing.")
        return 1

if __name__ == "__main__":
    sys.exit(main())